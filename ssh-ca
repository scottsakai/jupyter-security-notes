#!/bin/bash

# This script is the SSH CA, it should be run as a dedicated
# user, which has exclusive access to SIGNING_KEY.

# The signing name comes in on the first line.
# We'll generate the keypair because we can't trust the caller to
# not do something silly like use the same keypair for everything.
#
# Don't use args since it's easy to mess those up and do something dangerous.

umask 0077
set -u


# This is the ssh key used to sign certs
# It should only be readable by the aforementioned dedicated user.
SIGNING_KEY="/var/secrets/ssh-ca-key"


# This ID shows up as the CA identity on the host accepting the cert.
SIGNING_IDENTITY="SSH CA on shaka.sdsc.edu"


# Duration for the cert to be valid.
# Keep this short, since we don't do KRLs. ITGF allows SLCS CAs to
# sign for 1e6 seconds without a CRL, so let's use that as an upper
# bound.
VALIDITY_PERIOD="+1000s"

# debug = write to stderr instead of syslog
DEBUG=0
#DEBUG=1

# we want to clean up the work directory always
function cleanup
{
  if [[ "${WORKDIR+1}" != "" && "${WORKDIR}" =~ ^/tmp/ ]]; then
    rm -rf "${WORKDIR}"
  fi
}

# We'll largely avoid writing to stderr since this should never
# be called directly.
# The bulk of info goes to syslog.
function oops
{
  if [[ "${DEBUG}" == 1 ]]; then
    echo "$@"
    if [[ "${WORKDIR+1}" != '' ]]; then
      for I in "${WORKDIR}"/*.stderr; do
        printf "ssh-ca cmd-stderr:%s  " "$I" | cat - "$I" 1>&2
      done
    fi
  else
    echo "ssh-ca: " "$@" | logger --id=$$
    if [[ "${WORKDIR+1}" != '' ]]; then
      for I in "${WORKDIR}"/*.stderr; do
        printf "ssh-ca cmd-stderr:%s  " "$I" | cat - "$I" | logger --id=$$
      done
    fi
  fi
  exit 1
}



# Do some sanity checking on the SIGNING_KEY
#  It must be readable.
if [[ ! -r "${SIGNING_KEY}" ]]; then
  oops "SIGNING_KEY isn't readable" 
fi

#  It must be a regular file
if [[ ! -f "${SIGNING_KEY}" ]]; then
  oops "SIGNING_KEY isn't a regular file" 
fi

#  It must only be readable by user (no group, no world)
KEYSTAT=$( stat -c "%a" "${SIGNING_KEY}" )
if [[ "${KEYSTAT}" != "600" ]]; then
  oops "SIGNING_KEY not mode 600"
fi


# We do need to work with files, since ssh-keygen
# needs regular files and not pipes.
WORKDIR=$(mktemp -d /tmp/ssh-ca-workdir.XXXXXXXXXX)
if [[ -z "${WORKDIR}" || ! "${WORKDIR}" =~ ^/tmp/ ]]; then
  oops "Failed to create temp dir WORKDIR. Got ${WORKDIR}." 
  exit 1
fi

# from this point on, we have stuff to clean up...
trap cleanup EXIT


# get the local name (first line)
IFS=$'\n' read -r -s -n 65535 -t 10 LOCALNAME
if [[ $? -ne 0 ]]; then
  oops "Did not get LOCALNAME (timeout on input?)"
fi
if [[ -z "${LOCALNAME}" ]]; then
  oops "No LOCALNAME provided"
fi


# Generate a keypair for the user 
ssh-keygen \
  -t ed25519 \
  -f "${WORKDIR}/userkey" \
  -N '' \
  -q \
  -C "${SIGNING_IDENTITY}@$(date +%Y%m%d-%H%M%S)" \
  &>"${WORKDIR}/keygen.stderr"

# check the pubkey to make sure it's sane
PUBKEY_FP=$(ssh-keygen -l -f "${WORKDIR}/userkey.pub" 2>"${WORKDIR}/keyfp.stderr")
if [[ $? -ne 0 || -z "${PUBKEY_FP}" ]]; then
  oops "Unable to generate fingerprint for pubkey... is it really an ssh pubkey?"
fi

# check the local name for basic sanity
if [[ "${LOCALNAME}" =~ [^-_a-z0-9] ]]; then
  oops "LOCALNAME contains junk characters"
elif [[ "${LOCALNAME}" == 'root' ]]; then
  oops "LOCALNAME is root"
fi

# do the signing
ssh-keygen -s "${SIGNING_KEY}" \
  -I "${SIGNING_IDENTITY}" \
  -n "${LOCALNAME}" \
  -V "${VALIDITY_PERIOD}" \
  "${WORKDIR}/userkey.pub" 2>"${WORKDIR}/keysign.stderr"

if [[ $? -ne 0 ]]; then
  oops "Failed to sign ssh key ${PUBKEY_FP} for user ${LOCALNAME}"
fi

# done!
echo -E "ssh-ca: Successfully signed ssh key ${PUBKEY_FP} for user ${LOCALNAME}" | logger --id=$$
cat "${WORKDIR}/userkey"
cat "${WORKDIR}/userkey-cert.pub"
exit 0





